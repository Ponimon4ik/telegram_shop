from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from core.filters import IsPrivate
from core.keyboards.product_keyboard import ProductCallbackFactory
from core.services.product import send_product_messages, edit_product_message
from core.utils.cart import update_cart
from core.db.product import get_products_for_subcategory, get_product


EMPTY_SUBCATEGORY = '–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å'
PRODUCT_NO_EXIST = '–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è —Ç–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
SUBCATEGORY_TITLE = 'üõçÔ∏è {subcategory_title}'

router = Router()
router.message.filter(IsPrivate())


@router.callback_query(F.data.startswith('subcategory'))
async def process_show_products(callback_query: CallbackQuery, state: FSMContext):
    _, subcategory_id = callback_query.data.split('_')
    # –ë–æ–ª—å—à–µ –Ω–µ —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ.
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª —Å –Ω–∏–º —Ä–∞–±–æ—Ç—É –∏ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    await state.update_data(sent_categories_message=None)  # todo –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è
    data = await state.get_data()
    products = await get_products_for_subcategory(
        subcategory_id=subcategory_id,
        cart_products_ids=list(data.get('cart', dict()).keys())
    )
    if not products:
        await callback_query.message.edit_text(text=EMPTY_SUBCATEGORY, reply_markup=None)
        return
    # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –º–µ–Ω—é
    await callback_query.message.delete()
    await callback_query.message.answer(
        text=SUBCATEGORY_TITLE.format(subcategory_title=products[0]['subcategory_title'])
    )
    sent_products_messages = await send_product_messages(
        products=products, update=callback_query, state=state
    )
    await state.update_data(sent_products_messages=sent_products_messages)


@router.callback_query(ProductCallbackFactory.filter())
async def process_select_product(callback_query: CallbackQuery, state: FSMContext):
    _, product_id, action = callback_query.data.split('_')
    product_id = int(product_id)
    product = await get_product(product_id)
    if not product:
        await callback_query.message.edit_text(text=PRODUCT_NO_EXIST, reply_markup=None)
        return
    updated_cart = await update_cart(product=product, action=action, state=state)
    if product['quantity'] <= 0 and action == 'clean':
        await callback_query.message.delete()
        return
    await edit_product_message(
        callback_query=callback_query, product=product, cart=updated_cart
    )
